{"version":3,"sources":["Box.tsx","Grid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Box","boxClass","key","row","col","selectBox","className","id","onClick","Grid","grid","rows","cols","useState","rowsArr","i","j","boxId","push","App","generation","setGenerations","Array","from","length","setGrid","play","oldGen","newGen","neighbors","useEffect","mutableGrid","Math","floor","random","seed","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c1c4b2d.chunk.js","sourcesContent":["import * as React from 'react'\n\ninterface BoxProps {\n  boxClass: string,\n  key: string,\n  row: number,\n  col: number,\n  selectBox: (row: number, col: number) => void\n}\n\nconst Box: React.FC<BoxProps> = ({\n  boxClass,\n  key,\n  row,\n  col,\n  selectBox\n}) => {\n  return (\n    <div className={boxClass} key={key} id={key} onClick={() => {\n      selectBox(row, col)\n    }}></div>\n  )\n}\n\nexport default Box\n","import * as React from 'react'\nimport { useState } from 'react'\nimport Box from './Box'\n\ninterface GridProps {\n  grid: boolean[][]\n  rows: number,\n  cols: number,\n  selectBox: (row: number, col: number) => void\n}\n\nconst Grid: React.FC<GridProps> = ({grid, rows, cols, selectBox}) => {\n  const [width, setWidth] = useState(cols * 16)\n  const rowsArr = [];\n  let boxClass = '';\n  for (let i = 0 ; i < rows; i++){\n    for (let j = 0 ; j < cols; j++){\n      let boxId = i + \"_\" + j\n      boxClass = grid[i][j] ? 'box on' : 'box off'\n      rowsArr.push(<Box boxClass={boxClass} key={boxId} row={i} col={j} selectBox={selectBox}/>)\n    }\n  }\n    return (\n        <div className=\"grid\">\n          {rowsArr}\n        </div>\n    )\n}\n\nexport default Grid\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport Grid from './Grid'\nimport { Nav, Navbar } from 'react-bootstrap'\n\nconst App: React.FC = () => {\n  const [generation, setGenerations] = useState(1)\n  const [rows, setRows] = useState(20)\n  const [cols, setCols] = useState(20)\n  const [grid, setGrid] = useState(Array.from({ length: rows }, () =>\n    Array.from({ length: cols }, () => false)\n  ))\n\n  const seed = () => {\n    const mutableGrid = [...grid]\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (Math.floor(Math.random() * 9) === 1) {\n          mutableGrid[i][j] = true\n        }\n      }\n    }\n    setGrid(mutableGrid)\n  }\n\n  const play = () => {\n    const oldGen = [...grid]\n    const newGen = [...grid]\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        let neighbors = 0\n        if (i > 0) if (oldGen[i - 1][j]) neighbors++;\n        if (i > 0 && j > 0) if (oldGen[i - 1][j - 1]) neighbors++;\n        if (i > 0 && j < cols - 1) if (oldGen[i - 1][j + 1]) neighbors++;\n        if (j < cols - 1) if (oldGen[i][j + 1]) neighbors++;\n        if (j > 0) if (oldGen[i][j - 1]) neighbors++;\n        if (i < rows - 1) if (oldGen[i + 1][j]) neighbors++;\n        if (i < rows - 1 && j > 0) if (oldGen[i + 1][j - 1]) neighbors++;\n        if (i < rows - 1 && j < cols - 1) if (oldGen[i + 1][j + 1]) neighbors++;\n        if (oldGen[i][j] && (neighbors < 2 || neighbors > 3)) newGen[i][j] = false;\n        if (!oldGen[i][j] && neighbors === 3) newGen[i][j] = true;\n      }\n    }\n    setGrid(newGen)\n    setGenerations(generation + 1)\n  }\n\n  useEffect(() => {\n    seed()\n    play()\n  }, [])\n\n  useEffect(() => {\n    play()\n  }, [generation])\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"dark\" expand=\"lg\">\n        <Navbar.Brand href=\"#home\">React game of life</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#home\">Home</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Grid grid={grid} rows={rows} cols={cols} selectBox={(row: number, col: number) => {\n        const mutableGrid = [...grid]\n        mutableGrid[row][col] = true\n        setGrid(mutableGrid)\n      }}/>\n      <h2>Generations: {generation}</h2>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}